{ pkgs, ... }:

{
home.packages = with pkgs; [
hunspell
hunspellDicts.en-us
hunspellDicts.ro-ro
hunspellDicts.ru-ru
hunspellDicts.es-es
];

programs.emacs = {
enable = true;
package = with pkg: [ ] ; # Updated to Emacs 30 due to Emacs 29 removal for CVEs

extraPackages = epkgs: [
(epkgs.treesit-grammars.with-grammars (p: with p; [
					  tree-sitter-bash
					  tree-sitter-c
					  tree-sitter-cpp
					  tree-sitter-css
					  tree-sitter-javascript
					  tree-sitter-json
					  tree-sitter-python
					  tree-sitter-rust
					  tree-sitter-yaml
					  ]))
epkgs.consult
epkgs.dashboard
epkgs.eglot
epkgs.flyspell-correct
epkgs.gruvbox-theme
epkgs.ligature
epkgs.marginalia
epkgs.orderless
epkgs.org-modern
epkgs.org-roam
epkgs.org-roam-ui
epkgs.posframe
epkgs.vertico
epkgs.vertico-posframe
];

extraConfig = ''
;; -*- lexical-binding: t; -*-

;; Suppress startup screen and message early
(setq inhibit-startup-screen t)
(setq inhibit-startup-message t)
(setq initial-buffer-choice nil)

;; Spell checking setup
(setq ispell-program-name "hunspell")
(setq ispell-extra-args '("-d" "en_US,ro_RO,ru_RU,es_ES"))
(add-hook 'text-mode-hook #'flyspell-mode)
(add-hook 'org-mode-hook #'flyspell-mode)

(use-package flyspell-correct
    :after flyspell
    :bind (("C-;" . flyspell-correct-wrapper)
           :map flyspell-mode-map
           ("C-;" . flyspell-correct-wrapper)))

(setq use-package-always-ensure nil)

;; Completion framework: Vertico + Consult + Marginalia + Orderless
(use-package vertico
    :init
  (vertico-mode)
  :custom
  (vertico-scroll-margin 0)
  (vertico-count 20)
  (vertico-resize t)
  (vertico-cycle t))

(use-package vertico-posframe
    :after vertico
    :config
    (vertico-posframe-mode 1))

(use-package consult
    :bind (("C-x b" . consult-buffer)
           ("C-x p b" . consult-bookmark)
           ("C-x p f" . consult-recent-file)
           ("M-g g" . consult-goto-line)
           ("M-g i" . consult-imenu)
           ("M-s g" . consult-grep)
           ("M-s L" . consult-line)
           ("M-s m" . consult-multi-occur)
           ("M-s r" . consult-ripgrep)
           ("M-s s" . consult-search)
           ("M-y" . consult-yank-pop)
           :map minibuffer-local-map
           ("C-r" . consult-history))
    :config
    (setq consult-project-root-function
          #'consult--default-project-root-function))

(use-package marginalia
    :after vertico
    :init
    (marginalia-mode))

(use-package orderless
    :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))

;; Coding: Eglot for LSP
(use-package eglot
    :ensure t
    :hook (prog-mode . eglot-ensure)
    :config
    (setq eglot-autoshutdown t
          eglot-confirm-server-initiated-restart nil)
    :bind (:map eglot-mode-map
                ("C-c a" . eglot-code-actions)
                ("C-c r" . eglot-rename)
                ("C-c f" . eglot-format)))

;; Font configuration
(set-face-attribute 'default nil
                    :family "Maple Mono NF CN"
                    :height 180
                    :weight 'regular)

;; Ligatures
(use-package ligature
    :config
  (ligature-set-ligatures t '(">>" ">>>" "<<" "<<" "{{" "}}" "{{--" "}}" "/*" "*/" "||" "|||" "&&" "&&&" "::" ":::" "??" "???" "++" "+++" "##" "###" "!!" "!!!" "//" "///" "==" "===" "!=" "!==" "<=" ">=" "=<<" "=>>" "->" "<-" "<->" "=>" "<=>" "<!--" "-->" "<#--" "<!---->" "~~" "~>" "<~" "<~>" "~~>" "<~~" "::=" "=:=" ":>" ":<" "<:" ">:" "<*" "<*>" "*>" "<|" "<|>" "|>" "<+" "<+>" "+>" "</" "</>" "/>" "###" "####" "...." "::" ":::" "++" "+++" "??" "???" "!!" "!!!" "||" "|||" "&&" "&&&" "--" "---" "==" "===" "!=" "!==" "<=" ">=" "=<<" "=>>" "->" "<-" "<->" "=>" "<=>" "<!--" "-->" "<#--" "<!---->" "~~" "~>" "<~" "<~>" "~~>" "<~~" "::=" "=:=" ":>" ":<" "<:" ">:" "<*" "<*>" "*>" "<|" "<|>" "|>" "<+" "<+>" "+>" "</" "</>" "/>"))
  (global-ligature-mode t))

;; Stock UI deletions
(global-display-line-numbers-mode -1)
(global-hl-line-mode -1)
(column-number-mode 1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
(blink-cursor-mode 0)

;; Theme
(use-package gruvbox-theme
    :init
  (mapc #'disable-theme custom-enabled-themes)
  (load-theme 'gruvbox-dark-hard t))

;; Dashboard (only when no file arguments)
(when (< (length command-line-args) 2)
  (use-package dashboard
      :config
    (setq dashboard-center-content t
          dashboard-vertically-center-content t)
    (dashboard-setup-startup-hook)))

;; Persist history
(use-package savehist
    :init
  (savehist-mode))

;; Minibuffer configurations
(setq enable-recursive-minibuffers t)
(setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))

;; Cursor
(setq-default cursor-type 'bar)

;; Org Mode system
(setq org-directory "~/ORG/")
(setq org-agenda-files (directory-files-recursively "~/ORG/Roam/" "\\.org$"))
(setq org-id-locations-file (expand-file-name ".org-id-locations" user-emacs-directory))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)))

(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)

;; Org Modern UI
(use-package org-modern)
(with-eval-after-load 'org (global-org-modern-mode))
(add-hook 'org-mode-hook #'org-indent-mode)
(setq
 org-auto-align-tags nil
 org-tags-column 0
 global-visual-line-mode 1
 org-catch-invisible-edits 'show-and-error
 org-special-ctrl-a/e t
 org-insert-heading-respect-content t
 org-hide-emphasis-markers t
 org-startup-indented t
 org-indent-mode-turns-on-hiding-stars t
 org-modern-fold-stars '(("󰜵" . "󱥧"))
 org-modern-star 'fold
 org-ellipsis "…")

;; Variable font sizes for Org headings
(set-face-attribute 'org-level-1 nil :height 1.5)
(set-face-attribute 'org-level-2 nil :height 1.35)
(set-face-attribute 'org-level-3 nil :height 1.2)
(set-face-attribute 'org-level-4 nil :height 1.1)
(set-face-attribute 'org-level-5 nil :height 1.0)
(set-face-attribute 'org-level-6 nil :height 0.9)
(set-face-attribute 'org-level-7 nil :height 0.8)
(set-face-attribute 'org-level-8 nil :height 0.7)

(setq
 org-startup-with-inline-images t
 org-use-fast-todo-selection t
 org-todo-keywords
 '((sequence "TODO(t)" "CALL(l)" "MEETING(m)" "TEST(e)" "HOMEWORK(h)" "PROJECT(p)" "|" "DONE(d)" "CANCELLED(c)"))
 org-todo-keyword-faces
 '(("TODO" . (:background "#458588" :foreground "#fbf1c7" :weight bold))
   ("CALL" . (:background "#689d6a" :foreground "#fbf1c7" :weight bold))
   ("MEETING" . (:background "#d65d0e" :foreground "#fbf1c7" :weight bold))
   ("TEST" . (:background "#cc241d" :foreground "#fbf1c7" :weight bold))
   ("HOMEWORK" . (:background "#b16286" :foreground "#fbf1c7" :weight bold))
   ("PROJECT" . (:background "#d79921" :foreground "#fbf1c7" :weight bold))
   ("DONE" . (:background "#98971a" :foreground "#282828" :weight bold))
   ("CANCELLED" . (:background "#3c3836" :foreground "#928374" :weight bold :strike-through t))))

;; Org Roam
(use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/ORG/Roam/")
    (org-roam-dailies-directory "~/ORG/Roam/journal/")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (setq org-roam-dailies-capture-templates '(("d" "default" entry "* %?\nTaken: %(format-time-string \"<%Y-%m-%d %H:%M>\")" :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
    (org-roam-db-autosync-mode))

(use-package org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

;; Coding with Tree-sitter
(when (and (fboundp 'treesit-available-p) (treesit-available-p))
  (setq major-mode-remap-alist
        '((bash-mode . bash-ts-mode)
          (c-mode . c-ts-mode)
          (c++-mode . c++-ts-mode)
          (css-mode . css-ts-mode)
          (js-mode . js-ts-mode)
          (json-mode . json-ts-mode)
          (rust-mode . rust-ts-mode)
          (python-mode . python-ts-mode)
          (yaml-mode . yaml-ts-mode)))
  (setq treesit-font-lock-level 4))

;; Function to add checkboxes to a list
(defun my/org-list-add-checkboxes ()
  "Add [ ] to every plain-list item in the current list that lacks one."
  (interactive)
  (save-excursion
    (org-beginning-of-item-list)
    (let ((end (save-excursion (org-end-of-item-list) (point))))
      (while (re-search-forward
	      "^\\(\\s-*[-+*] \\)\\([^[]\\)" end t)
	(replace-match "\\1[ ] \\2" nil nil)))))

;; Optional: bind it
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-c x c") #'my/org-list-add-checkboxes))

'';
};
}

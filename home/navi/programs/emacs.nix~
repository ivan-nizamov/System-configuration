{ pkgs, ... }:

{
  programs.emacs = {
    enable = true;
    package = pkgs.emacs30; # Updated to Emacs 30 due to Emacs 29 removal for CVEs

    extraPackages = epkgs: [
      (epkgs.treesit-grammars.with-grammars (p: [
        p.tree-sitter-bash
        p.tree-sitter-c
        p.tree-sitter-cpp
        p.tree-sitter-css
        p.tree-sitter-javascript
        p.tree-sitter-json
        p.tree-sitter-python
        p.tree-sitter-rust
        p.tree-sitter-yaml
      ]))
      epkgs.dashboard
      epkgs.gruvbox-theme
      epkgs.ligature
      epkgs.org-modern
      epkgs.org-roam
      epkgs.org-roam-ui
      epkgs.posframe
      epkgs.vertico
      epkgs.vertico-posframe
    ];

    extraConfig = ''
      ;; -*- lexical-binding: t; -*-

      (setq use-package-always-ensure nil)

      ;; Font configuration
      (set-face-attribute 'default nil
                          :family "Maple Mono NF CN"
                          :height 180
                          :weight 'regular)

      ;; Ligatures
      (use-package ligature
        :config
        (ligature-set-ligatures t '(">>" ">>>" "<<" "<<" "{{" "}}" "{{--" "}}" "/*" "*/" "||" "|||" "&&" "&&&" "::" ":::" "??" "???" "++" "+++" "##" "###" "!!" "!!!" "//" "///" "==" "===" "!=" "!==" "<=" ">=" "=<<" "=>>" "->" "<-" "<->" "=>" "<=>" "<!--" "-->" "<#--" "<!---->" "~~" "~>" "<~" "<~>" "~~>" "<~~" "::=" "=:=" ":>" ":<" "<:" ">:" "<*" "<*>" "*>" "<|" "<|>" "|>" "<+" "<+>" "+>" "</" "</>" "/>" "###" "####" "...." "::" ":::" "++" "+++" "??" "???" "!!" "!!!" "||" "|||" "&&" "&&&" "--" "---" "==" "===" "!=" "!==" "<=" ">=" "=<<" "=>>" "->" "<-" "<->" "=>" "<=>" "<!--" "-->" "<#--" "<!---->" "~~" "~>" "<~" "<~>" "~~>" "<~~" "::=" "=:=" ":>" ":<" "<:" ">:" "<*" "<*>" "*>" "<|" "<|>" "|>" "<+" "<+>" "+>" "</" "</>" "/>"))
        (global-ligature-mode t))

      ;; Stock UI deletions
      (setq inhibit-startup-message t)
      (global-display-line-numbers-mode -1)
      (global-hl-line-mode -1)
      (column-number-mode 1)
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
      (menu-bar-mode -1)
      (blink-cursor-mode 0)

      ;; Theme
      (use-package gruvbox-theme
        :init
        (mapc #'disable-theme custom-enabled-themes)
        (load-theme 'gruvbox-dark-hard t))

      ;; Dashboard
      (use-package dashboard
        :config
        (setq dashboard-center-content t
              dashboard-vertically-center-content t)
        (dashboard-setup-startup-hook))

      ;; Vertico and posframe
      (use-package vertico
        :init
        (vertico-mode)
        :custom
        (vertico-scroll-margin 0)
        (vertico-count 20)
        (vertico-resize t)
        (vertico-cycle t))

      (use-package vertico-posframe
        :after vertico)

      (use-package vertico-multiform
        :after vertico
        :config
        (setq vertico-multiform-commands
              '((t posframe
                 (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
                 (vertico-posframe-border-width . 10)
                 (vertico-posframe-fallback-mode . vertico-buffer-mode))))
        (vertico-multiform-mode 1))

      ;; Persist history
      (use-package savehist
        :init
        (savehist-mode))

      ;; Minibuffer configurations
      (setq enable-recursive-minibuffers t)
      (setq minibuffer-prompt-properties
            '(read-only t cursor-intangible t face minibuffer-prompt))

      ;; Cursor
      (setq-default cursor-type 'bar)

      ;; Org Mode system
      (setq org-directory "~/ORG/")
      (setq org-agenda-files (directory-files-recursively "~/ORG/Roam/" "\\.org$"))
      (setq org-id-locations-file (expand-file-name ".org-id-locations" user-emacs-directory))

      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (python . t)))

      (global-set-key (kbd "C-c l") 'org-store-link)
      (global-set-key (kbd "C-c a") 'org-agenda)

      ;; Org Modern UI
      (use-package org-modern)
      (with-eval-after-load 'org (global-org-modern-mode))
      (add-hook 'org-mode-hook #'org-indent-mode)
      (setq
       org-auto-align-tags nil
       org-tags-column 0
       org-catch-invisible-edits 'show-and-error
       org-special-ctrl-a/e t
       org-insert-heading-respect-content t
       org-hide-emphasis-markers t
       org-startup-indented t
       org-indent-mode-turns-on-hiding-stars t
       org-modern-fold-stars '(("󰜵" . "󱥧"))
       org-modern-star 'fold
       org-ellipsis "…")

      ;; Variable font sizes for Org headings
      (set-face-attribute 'org-level-1 nil :height 1.5)
      (set-face-attribute 'org-level-2 nil :height 1.35)
      (set-face-attribute 'org-level-3 nil :height 1.2)
      (set-face-attribute 'org-level-4 nil :height 1.1)
      (set-face-attribute 'org-level-5 nil :height 1.0)
      (set-face-attribute 'org-level-6 nil :height 0.9)
      (set-face-attribute 'org-level-7 nil :height 0.8)
      (set-face-attribute 'org-level-8 nil :height 0.7)

      (setq
       org-startup-with-inline-images t
       org-use-fast-todo-selection t
       org-todo-keywords
       '((sequence "TODO( t )" "CALL(l)" "MEETING(m)" "TEST(e)" "HOMEWORK(h)" "PROJECT(p)" "|" "DONE(d)" "CANCELLED(c)"))
       org-todo-keyword-faces
       '(("TODO" . (:background "#458588" :foreground "#fbf1c7" :weight bold))
         ("CALL" . (:background "#689d6a" :foreground "#fbf1c7" :weight bold))
         ("MEETING" . (:background "#d65d0e" :foreground "#fbf1c7" :weight bold))
         ("TEST" . (:background "#cc241d" :foreground "#fbf1c7" :weight bold))
         ("HOMEWORK" . (:background "#b16286" :foreground "#fbf1c7" :weight bold))
         ("PROJECT" . (:background "#d79921" :foreground "#fbf1c7" :weight bold))
         ("DONE" . (:background "#98971a" :foreground "#282828" :weight bold))
         ("CANCELLED" . (:background "#3c3836" :foreground "#928374" :weight bold :strike-through t))))

      ;; Org Roam
      (use-package org-roam
        :init
        (setq org-roam-directory (file-truename "~/ORG/Roam/")
              org-roam-dailies-directory "journal/"
              org-roam-completion-everywhere t)
        :bind (("C-c n l" . org-roam-buffer-toggle)
               ("C-c n f" . org-roam-node-find)
               ("C-c n i" . org-roam-node-insert)
               ("C-c n d" . org-roam-dailies-map))
        :config
        (require 'org-roam-dailies)
        (setq org-roam-dailies-capture-templates
              '(("d" "default" entry
                 "* %?\nTaken: %(format-time-string \"<%Y-%m-%d %H:%M>\")"
                 :if-new (file+head "%<%Y-%m-%d>.org"
                                    "#+title: %<%Y-%m-%d>\n"))))
        (org-roam-db-autosync-mode))

      (use-package org-roam-ui
        :after org-roam
        :config
        (setq org-roam-ui-sync-theme t
              org-roam-ui-follow t
              org-roam-ui-update-on-save t
              org-roam-ui-open-on-start t))

      ;; Coding with Tree-sitter
      (when (and (fboundp 'treesit-available-p) (treesit-available-p))
        (setq major-mode-remap-alist
              '((bash-mode . bash-ts-mode)
                (c-mode . c-ts-mode)
                (c++-mode . c++-ts-mode)
                (css-mode . css-ts-mode)
                (js-mode . js-ts-mode)
                (json-mode . json-ts-mode)
                (rust-mode . rust-ts-mode)
                (python-mode . python-ts-mode)
                (yaml-mode . yaml-ts-mode)))
        (setq treesit-font-lock-level 4))
    '';
  };
}
